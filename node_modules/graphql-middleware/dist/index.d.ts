import { GraphQLSchema } from 'graphql';
import { IMiddleware, IMiddlewareFunction, IMiddlewareTypeMap, IMiddlewareFieldMap, IMiddlewareGenerator } from './types';
export { IMiddleware, IMiddlewareTypeMap, IMiddlewareFieldMap, IMiddlewareFunction, IMiddlewareGenerator };
export declare class MiddlewareGenerator<TSource, TContext, TArgs> {
    private generator;
    constructor(generator: IMiddlewareGenerator<TSource, TContext, TArgs>);
    generate(schema: GraphQLSchema): IMiddleware<TSource, TContext, TArgs>;
}
export declare function middleware<TSource = any, TContext = any, TArgs = any>(generator: IMiddlewareGenerator<TSource, TContext, TArgs>): MiddlewareGenerator<TSource, TContext, TArgs>;
export declare class MiddlewareError extends Error {
    constructor(...props: any[]);
}
export declare function applyMiddleware<TSource = any, TContext = any, TArgs = any>(schema: GraphQLSchema, ...middlewares: (IMiddleware<TSource, TContext, TArgs> | MiddlewareGenerator<TSource, TContext, TArgs>)[]): GraphQLSchema;
export declare function applyMiddlewareToDeclaredResolvers<TSource = any, TContext = any, TArgs = any>(schema: GraphQLSchema, ...middlewares: (IMiddleware<TSource, TContext, TArgs> | MiddlewareGenerator<TSource, TContext, TArgs>)[]): GraphQLSchema;
